<UserControl xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:cust="clr-namespace:MVVMCommsDemo.Customers"
             xmlns:local="clr-namespace:MVVMCommsDemo"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
             x:Class="MVVMCommsDemo.Customers.CustomerListView"
             mc:Ignorable="d"
             d:DesignHeight="300"
             d:DesignWidth="300"
             >
    <UserControl.Resources>
        <DataTemplate x:Key="CustomerTemplate">
            <Border BorderThickness="3"
                    BorderBrush="Blue">
                <StackPanel>
                    <TextBlock Text="{Binding FirstName}" />
                    <TextBlock Text="{Binding LastName}" />
                    <TextBlock Text="{Binding Phone}" />
                </StackPanel>
            </Border>
        </DataTemplate>
    </UserControl.Resources>
    <UserControl.InputBindings>
        <KeyBinding Key="D"
                    Modifiers="Control"
                    Command="{Binding DeleteCommand}" />
    </UserControl.InputBindings>
    <UserControl.DataContext>
        <cust:CustomerListViewModel />
    </UserControl.DataContext>
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Loaded">
            <ei:CallMethodAction TargetObject="{Binding}" MethodName="LoadCustomers" />
        </i:EventTrigger>
    </i:Interaction.Triggers>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="2*" />
            <RowDefinition Height="1*" />
        </Grid.RowDefinitions>
        <!--Commands on buttons have a command property to hook up to an ICommand exposed as a property on our view model that is an ICommand
        and bind to it from the Button's Command property = > i.e. DeleteCommand property of type ICommand as the XAML gets parsed here :
        1 - it calls the get block on that ICommand property to get a reference to the Command object
        2-  it calls CanExecute on that command to determine the initial enabled or disabled state of the command, and it will enable or disable the button as a result.
        3-  it will subscribe to CanExecuteChanged on that ICommand, which allows it to be notified in the future if the enabled or disabled state of that command changes-->
        <Button Content="Delete"
                Command="{Binding DeleteCommand}"
                HorizontalAlignment="Left"
                VerticalAlignment="Top"
                Width="75" />
        <Button Content="Change Customer"
                HorizontalAlignment="Left"
                Margin="80,0,0,0"
                VerticalAlignment="Top"
                Width="100"
                Click="OnChangeCustomer" />


        <DataGrid x:Name="customerDataGrid"
                  AutoGenerateColumns="False"
                  ItemsSource="{Binding Customers}"
                  SelectedItem="{Binding SelectedCustomer}"
                  Grid.Row="1">
            <DataGrid.Columns>
                <DataGridTextColumn Binding="{Binding FirstName}"
                                    Header="First Name"
                                    Width="SizeToHeader" />
                <DataGridTextColumn Binding="{Binding LastName}"
                                    Header="Last Name"
                                    Width="SizeToHeader" />
                <DataGridTextColumn Binding="{Binding Phone}"
                                    Header="Phone"
                                    Width="SizeToHeader" />
            </DataGrid.Columns>
        </DataGrid>
        <ListBox ItemsSource="{Binding Customers}"
                 ItemTemplate="{StaticResource CustomerTemplate}"
                 Grid.Row="2" />
    </Grid>
</UserControl>
